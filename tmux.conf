set -g prefix C-a #
unbind C-b # C-b即Ctrl+b键，unbind意味着解除绑定
bind C-a send-prefix # 绑定Ctrl+j为新的指令前缀

# 从tmux v1.6版起，支持设置第二个指令前缀
#set-option -g prefix2 ` # 设置一个不常用的`键作为指令前缀，按键更快些

# 绑定快捷键为r
bind r source-file ~/.tmux.conf \; display-message "Config reloaded.."

unbind '"'
bind - splitw -v -c '#{pane_current_path}' # 垂直方向新增面板，默认进入当前目录
unbind %
bind = splitw -h -c '#{pane_current_path}' # 水平方向新增面板，默认进入当前目录'"'

#tmux v2.1(2015.10.28)之前的版本
#setw -g mode-mouse on # 支持鼠标选取文本等
#setw -g mouse-resize-pane on # 支持鼠标拖动调整面板的大小(通过拖动面板间的分割线)
#setw -g mouse-select-pane on # 支持鼠标选中并切换面板
#setw -g mouse-select-window on # 支持鼠标选中并切换窗口(通过点击状态栏窗口名称)

#tmux v2.1及以上的版本
#set-option -g mouse on # 等同于以上4个指令的效果
# 绑定hjkl键为面板切换的上下左右键
bind -r k select-pane -U # 绑定k为↑
bind -r j select-pane -D # 绑定j为↓
bind -r h select-pane -L # 绑定h为←
bind -r l select-pane -R # 绑定l为→

bind -r e lastp # 选择最后一个面板
bind -r ^e last # 选择最后一个窗口

bind -r ^u swapp -U # 与前一个面板交换位置
bind -r ^d swapp -D # 与后一个面板交换位置

# 绑定Ctrl+hjkl键为面板上下左右调整边缘的快捷指令
#bind -r ^k resizep -U 10 # 绑定Ctrl+k为往↑调整面板边缘10个单元格
#bind -r ^j resizep -D 10 # 绑定Ctrl+j为往↓调整面板边缘10个单元格
#bind -r ^h resizep -L 10 # 绑定Ctrl+h为往←调整面板边缘10个单元格
#bind -r ^l resizep -R 10 # 绑定Ctrl+l为往→调整面板边缘10个单元格

bind a setw synchronize-panes

bind m command-prompt "splitw -h 'exec man %%'"   # 绑定m键为在新的panel打开man
# 绑定P键为开启日志功能，如下，面板的输出日志将存储到桌面
#bind P pipe-pane -o "cat >>~/Desktop/#W.log" \; display "Toggled logging to ~/Desktop/#W.log"

# need xclip
# buffer缓存复制到Linux系统粘贴板
#bind C-c run " tmux save-buffer - | xclip -i -sel clipboard"
# Linux系统粘贴板内容复制到会话
#bind C-v run " tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"


set -g base-index 1 # 设置窗口的起始下标为1
set -g pane-base-index 1 # 设置面板的起始下标为1

#set -g status-utf8 on # 状态栏支持utf8
set -g status-interval 1 # 状态栏刷新时间
set -g status-justify left # 状态栏列表左对齐
setw -g monitor-activity on # 非当前窗口有内容更新时在状态栏通知

#set -g status-bg black # 设置状态栏背景黑色
#set -g status-fg yellow # 设置状态栏前景黄色
#set -g status-style "bg=black, fg=yellow" # 状态栏前景背景色

#set -g status-left "#[bg=#FF661D] ❐ #S " # 状态栏左侧内容
#set -g status-right 'Continuum status: #{continuum_status}' # 状态栏右侧内容
#set -g status-left-length 300 # 状态栏左边长度300
#set -g status-right-length 500 # 状态栏左边长度500

set -wg window-status-format "#{?pane_synchronized,#[fg=white#,bg=blue],#[fg=green#,bg=blank]}#I #W" # 状态栏窗口名称格式
set -wg window-status-current-format "#{?pane_synchronized,#[fg=white#,bg=blue],#[fg=white#,bg=red]}#I #{pane_current_path} " # 状态栏当前窗口>    名称格式(#I：序号，#w：窗口名称，#F：间隔符)
set -wg window-status-separator "|" # 状态栏窗口名称之间的间隔
#set -wg window-status-current-style "bg=red" # 状态栏当前窗口名称的样式
#set -wg window-status-last-style "fg=red" # 状态栏最后一个窗口名称的样式

#set -g message-style "bg=#202529, fg=#91A8BA" # 指定消息通知的前景、后景色

#set -g default-terminal "tmux-256color"

setw -g automatic-rename off
setw -g allow-rename off

# 默认需要引入的插件
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# 引入其他插件的示例
# set -g @plugin 'github_username/plugin_name' # 格式：github用户名/插件名
# set -g @plugin 'git@github.com/user/plugin' # 格式：git@github插件地址
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# 初始化tmux插件管理器(保证这行在~/.tmux.conf的非常靠后的位置)
#run '~/.tmux/plugins/tpm/tpm'

run-shell ~/.tmux/plugins/tmux-resurrect/resurrect.tmux

#2）恢复面板内容，需在~/.tmux.conf中增加一行配置：
#
set -g @resurrect-capture-pane-contents 'on' # 开启恢复面板内容功能
#
#目前使用该功能时，请确保tmux的default-command没有包含&& 或者||操作符，否则将导致bug。（查看default-command的值，请使用命令tmux show -g default-command。）
#
#3）恢复shell的历史记录，需在~/.tmux.conf中增加一行配置：
#
#set -g @resurrect-save-shell-history 'on'
#
#由于技术的限制，保存时，只有无前台任务运行的面板，它的shell历史记录才能被保存。

# 开启自动保存恢复
run-shell ~/.tmux/plugins/tmux-continuum/continuum.tmux

# 默认保存时间:
#set -g @continuum-save-interval '60'
# 关闭自动备份 则是设置为0
set -g @continuum-save-interval '0'
#启动tmux时自动恢复
set -g @continuum-restore 'on' # 启用自动恢复
#想要绝对确定自动恢复不会发生，就在用户根目录下创建一个tmux_no_auto_restore空文件（创建命令：touch ~/tmux_no_auto_restore）

#Tmux Continuum提供了一个查看运行状态的插值#{continuum_status}，它支持status-right 和 status-left两种状态栏设置，如下所示：

#set -g status-right 'Continuum status: #{continuum_status}'
#tmux运行时，#{continuum_status} 将显示保存的时间间隔（单位为分钟），此时状态栏会显示：
#Continuum status: 1440
#如果其自动保存功能关闭了，那么状态栏会显示：
#Continuum status: off

#借助Tmux Continuum插件，Mac重启时，我们甚至可以选择在Terminal 或者 iTerm2 中自动全屏启用tmux。
#set -g @continuum-boot 'on'

#基于tpm插件管理器，安装插件仅需如下两步：

#在~/.tmux.conf中增加新的插件，如set -g @plugin '...'。
#按下prefix + I键下载插件，并刷新tmux环境。
#更新插件，请按下prefix + U 键，选择待更新的插件后，回车确认并更新。
#
#卸载插件，需如下两步：
#
#在~/.tmux.conf中移除插件所在行。
#按下prefix + alt + u 移除插件。

#bind -T copy-mode-vi v send-keys -X begin-selection
#bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
bind Escape copy-mode # 绑定esc键为进入复制模式
#bind p pasteb # 绑定p键为粘贴文本（p键默认用于进入上一个窗口，不建议覆盖）
setw -g mode-keys vi
# utf8 is on
#set -g utf8 on
#set -g status-utf8 on

# address vim mode switching delay (http://superuser.com/a/252717/65504)
set -s escape-time 0

# increase scrollback buffer size
set -g history-limit 50000

# tmux messages are displayed for 4 seconds
set -g display-time 4000

# refresh 'status-left' and 'status-right' more often
#set -g status-interval 5

# set only on OS X where it's required
#set -g default-command "reattach-to-user-namespace -l $SHELL"

# upgrade $TERM
set -g default-terminal "screen-256color"

# emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
#set -g status-keys emacs

# focus events enabled for terminals that support them
#set -g focus-events on

# super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on
set -g @resurrect-strategy-vim 'session' # for vim
set -g @resurrect-strategy-nvim 'session' # for neovim

run '~/.tmux/plugins/tpm/tpm'
